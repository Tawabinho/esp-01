
esp-01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002c2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e51  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f8  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000767  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000678  00000000  00000000  00002811  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  7a:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command_>:
#define F_CPU 16000000
#include "lcd_.h"
#include <util/delay.h>
#include <avr/io.h>
void lcd_command_(char cmd){
	PORTA=(PORTA & 0x0F)|(cmd & 0xF0);
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
	clear_bit_(PORTB,RS);
  8e:	c1 98       	cbi	0x18, 1	; 24
	set_bit_(PORTB,EN);
  90:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	ef e3       	ldi	r30, 0x3F	; 63
  94:	ff e1       	ldi	r31, 0x1F	; 31
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcd_command_+0x14>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcd_command_+0x1a>
  9c:	00 00       	nop
	_delay_ms(2);
	clear_bit_(PORTB,EN);
  9e:	c3 98       	cbi	0x18, 3	; 24
  a0:	ef ed       	ldi	r30, 0xDF	; 223
  a2:	fe e2       	ldi	r31, 0x2E	; 46
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command_+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_command_+0x28>
  aa:	00 00       	nop
	_delay_ms(3);
	PORTA=(PORTA & 0x0F)|(cmd << 4);
  ac:	2b b3       	in	r18, 0x1b	; 27
  ae:	2f 70       	andi	r18, 0x0F	; 15
  b0:	f0 e1       	ldi	r31, 0x10	; 16
  b2:	8f 9f       	mul	r24, r31
  b4:	c0 01       	movw	r24, r0
  b6:	11 24       	eor	r1, r1
  b8:	82 2b       	or	r24, r18
  ba:	8b bb       	out	0x1b, r24	; 27
	set_bit_(PORTB,EN);
  bc:	c3 9a       	sbi	0x18, 3	; 24
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	9f e1       	ldi	r25, 0x1F	; 31
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_command_+0x40>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_command_+0x46>
  c8:	00 00       	nop
	_delay_ms(2);
	clear_bit_(PORTB,EN);
  ca:	c3 98       	cbi	0x18, 3	; 24
  cc:	ef ed       	ldi	r30, 0xDF	; 223
  ce:	fe e2       	ldi	r31, 0x2E	; 46
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_command_+0x4e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_command_+0x54>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <lcd_char_>:
	_delay_ms(3);
}
void lcd_char_(char data){
	PORTA=(PORTA & 0x0F)|(data & 0xF0);
  da:	9b b3       	in	r25, 0x1b	; 27
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	28 2f       	mov	r18, r24
  e0:	20 7f       	andi	r18, 0xF0	; 240
  e2:	92 2b       	or	r25, r18
  e4:	9b bb       	out	0x1b, r25	; 27
	set_bit_(PORTB,RS);
  e6:	c1 9a       	sbi	0x18, 1	; 24
	set_bit_(PORTB,EN);
  e8:	c3 9a       	sbi	0x18, 3	; 24
  ea:	ef e3       	ldi	r30, 0x3F	; 63
  ec:	ff e1       	ldi	r31, 0x1F	; 31
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_char_+0x14>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_char_+0x1a>
  f4:	00 00       	nop
	_delay_ms(2);
	clear_bit_(PORTB,EN);
  f6:	c3 98       	cbi	0x18, 3	; 24
  f8:	ef ed       	ldi	r30, 0xDF	; 223
  fa:	fe e2       	ldi	r31, 0x2E	; 46
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_char_+0x22>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_char_+0x28>
 102:	00 00       	nop
	_delay_ms(3);
	PORTA=(PORTA & 0x0F)|(data << 4);
 104:	2b b3       	in	r18, 0x1b	; 27
 106:	2f 70       	andi	r18, 0x0F	; 15
 108:	f0 e1       	ldi	r31, 0x10	; 16
 10a:	8f 9f       	mul	r24, r31
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	82 2b       	or	r24, r18
 112:	8b bb       	out	0x1b, r24	; 27
	set_bit_(PORTB,EN);
 114:	c3 9a       	sbi	0x18, 3	; 24
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9f e1       	ldi	r25, 0x1F	; 31
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_char_+0x40>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_char_+0x46>
 120:	00 00       	nop
	_delay_ms(2);
	clear_bit_(PORTB,EN);
 122:	c3 98       	cbi	0x18, 3	; 24
 124:	ef ed       	ldi	r30, 0xDF	; 223
 126:	fe e2       	ldi	r31, 0x2E	; 46
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_char_+0x4e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_char_+0x54>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <lcd_string_>:
	_delay_ms(3);
}
void lcd_string_(char *str){
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
	while( *str != '\0'){
 138:	88 81       	ld	r24, Y
 13a:	88 23       	and	r24, r24
 13c:	31 f0       	breq	.+12     	; 0x14a <lcd_string_+0x18>
 13e:	21 96       	adiw	r28, 0x01	; 1
		
		lcd_char_(*str);
 140:	0e 94 6d 00 	call	0xda	; 0xda <lcd_char_>
	_delay_ms(2);
	clear_bit_(PORTB,EN);
	_delay_ms(3);
}
void lcd_string_(char *str){
	while( *str != '\0'){
 144:	89 91       	ld	r24, Y+
 146:	81 11       	cpse	r24, r1
 148:	fb cf       	rjmp	.-10     	; 0x140 <lcd_string_+0xe>
		
		lcd_char_(*str);
		str++;
	}
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <lcd_clear>:
void lcd_clear(){
	lcd_command_(0x01);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9f e1       	ldi	r25, 0x1F	; 31
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_clear+0xa>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_clear+0x10>
 160:	00 00       	nop
	_delay_ms(2);
	lcd_command_(0x80);
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
 168:	08 95       	ret

0000016a <lcd_int_>:
#include "lcd_config.h"
#include "lcd_.h"
#include <util/delay.h>
#include <avr/io.h>
void lcd_int_(){
	DDRA=0xff;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 16e:	87 bb       	out	0x17, r24	; 23
	clear_bit_(PORTB,RW);
 170:	c2 98       	cbi	0x18, 2	; 24
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	9c e7       	ldi	r25, 0x7C	; 124
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_int_+0xc>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_int_+0x12>
 17c:	00 00       	nop
	_delay_ms(8);
	lcd_command_(0x33);
 17e:	83 e3       	ldi	r24, 0x33	; 51
 180:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
	lcd_command_(0x32);
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
	lcd_command_(0x28);
 18a:	88 e2       	ldi	r24, 0x28	; 40
 18c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
	lcd_command_(0x0c);
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
	lcd_command_(0x06);
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
	lcd_command_(0x01);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
 1a2:	08 95       	ret

000001a4 <main>:
#include "UART.h"
#include "lcd_.h"
#include "lcd_config.h"
#include <util/delay.h>
int main(void)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	c4 56       	subi	r28, 0x64	; 100
 1ae:	d1 09       	sbc	r29, r1
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
	char RECEIVE[100];
    UART_INT();
 1ba:	0e 94 1b 01 	call	0x236	; 0x236 <UART_INT>
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	9f e0       	ldi	r25, 0x0F	; 15
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x1e>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x24>
 1c8:	00 00       	nop
	_delay_ms(1);
	lcd_int_();
 1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_int_>
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x2e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x34>
 1d8:	00 00       	nop
	_delay_ms(1);
	lcd_command_(0x80);
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
	lcd_string_("hello");
 1e0:	80 e6       	ldi	r24, 0x60	; 96
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 99 00 	call	0x132	; 0x132 <lcd_string_>
 1e8:	9f ef       	ldi	r25, 0xFF	; 255
 1ea:	23 ed       	ldi	r18, 0xD3	; 211
 1ec:	80 e3       	ldi	r24, 0x30	; 48
 1ee:	91 50       	subi	r25, 0x01	; 1
 1f0:	20 40       	sbci	r18, 0x00	; 0
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x4a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x54>
 1f8:	00 00       	nop
	_delay_ms(1000);
	lcd_clear();
 1fa:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_clear>
	lcd_command_(0x80);
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command_>
	UART_SEND_STRING("AT");
 204:	86 e6       	ldi	r24, 0x66	; 102
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 2c 01 	call	0x258	; 0x258 <UART_SEND_STRING>
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x6c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x72>
 216:	00 00       	nop
	_delay_ms(1);
	UART_RECEIVE(RECEIVE);
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	0e 94 3b 01 	call	0x276	; 0x276 <UART_RECEIVE>
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x80>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x86>
 22a:	00 00       	nop
	_delay_ms(1);
	lcd_string_(RECEIVE);
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	0e 94 99 00 	call	0x132	; 0x132 <lcd_string_>
 234:	ff cf       	rjmp	.-2      	; 0x234 <main+0x90>

00000236 <UART_INT>:
 *  Author: Ahmed EL-Tawab
 */ 
#include "UART.h"
void UART_INT()
{
	UBRRL=8;
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<RXEN)|(1<<TXEN);
 23a:	8a b1       	in	r24, 0x0a	; 10
 23c:	88 61       	ori	r24, 0x18	; 24
 23e:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 240:	80 b5       	in	r24, 0x20	; 32
 242:	86 68       	ori	r24, 0x86	; 134
 244:	80 bd       	out	0x20, r24	; 32
 246:	08 95       	ret

00000248 <UART_SEND_BYTE>:
}
void UART_SEND_BYTE(unsigned char DATA)
{
	while(get_bit_(UCSRA,UDRE)==0);
 248:	5d 9b       	sbis	0x0b, 5	; 11
 24a:	fe cf       	rjmp	.-4      	; 0x248 <UART_SEND_BYTE>
	UDR=DATA;
 24c:	8c b9       	out	0x0c, r24	; 12
 24e:	08 95       	ret

00000250 <UART_RECEIVE_BYTE>:
}
unsigned char UART_RECEIVE_BYTE(){
	while(get_bit_(UCSRA,RXC)==0);
 250:	5f 9b       	sbis	0x0b, 7	; 11
 252:	fe cf       	rjmp	.-4      	; 0x250 <UART_RECEIVE_BYTE>
	return UDR;
 254:	8c b1       	in	r24, 0x0c	; 12
}
 256:	08 95       	ret

00000258 <UART_SEND_STRING>:
void UART_SEND_STRING(char *STR)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
	while(*STR!='\0')
 25e:	88 81       	ld	r24, Y
 260:	88 23       	and	r24, r24
 262:	31 f0       	breq	.+12     	; 0x270 <UART_SEND_STRING+0x18>
 264:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SEND_BYTE(*STR);
 266:	0e 94 24 01 	call	0x248	; 0x248 <UART_SEND_BYTE>
	while(get_bit_(UCSRA,RXC)==0);
	return UDR;
}
void UART_SEND_STRING(char *STR)
{
	while(*STR!='\0')
 26a:	89 91       	ld	r24, Y+
 26c:	81 11       	cpse	r24, r1
 26e:	fb cf       	rjmp	.-10     	; 0x266 <UART_SEND_STRING+0xe>
	{
		UART_SEND_BYTE(*STR);
		STR++;
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <UART_RECEIVE>:
void UART_RECEIVE(char *STR){
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	7c 01       	movw	r14, r24
	unsigned char i=0;
	STR[i]=UART_RECEIVE_BYTE();
 282:	0e 94 28 01 	call	0x250	; 0x250 <UART_RECEIVE_BYTE>
 286:	f7 01       	movw	r30, r14
 288:	80 83       	st	Z, r24
	while(STR[i] != '\n')
 28a:	8a 30       	cpi	r24, 0x0A	; 10
 28c:	61 f0       	breq	.+24     	; 0x2a6 <UART_RECEIVE+0x30>
 28e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		i++;
 290:	cf 5f       	subi	r28, 0xFF	; 255
		STR[i]=UART_RECEIVE_BYTE();
 292:	87 01       	movw	r16, r14
 294:	0c 0f       	add	r16, r28
 296:	11 1d       	adc	r17, r1
 298:	0e 94 28 01 	call	0x250	; 0x250 <UART_RECEIVE_BYTE>
 29c:	f8 01       	movw	r30, r16
 29e:	80 83       	st	Z, r24
	}
}
void UART_RECEIVE(char *STR){
	unsigned char i=0;
	STR[i]=UART_RECEIVE_BYTE();
	while(STR[i] != '\n')
 2a0:	8a 30       	cpi	r24, 0x0A	; 10
 2a2:	b1 f7       	brne	.-20     	; 0x290 <UART_RECEIVE+0x1a>
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <UART_RECEIVE+0x32>
		UART_SEND_BYTE(*STR);
		STR++;
	}
}
void UART_RECEIVE(char *STR){
	unsigned char i=0;
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		i++;
		STR[i]=UART_RECEIVE_BYTE();
	}
	i++;
	STR[i]='\0';
 2a8:	cf 5f       	subi	r28, 0xFF	; 255
 2aa:	f7 01       	movw	r30, r14
 2ac:	ec 0f       	add	r30, r28
 2ae:	f1 1d       	adc	r31, r1
 2b0:	10 82       	st	Z, r1
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
